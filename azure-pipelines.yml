# Go
# Build your Go application.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/go

jobs:
- job: Linux
  pool:
    name: default
    demands:
      - agent.location -equals local
      - agent.os -equals Linux

  variables:
    GOPATH: '/tmp/gopath'
    GOBIN:  '$(GOPATH)/bin' # Go binaries path 
    GOROOT: '/usr/local/go1.11' # Go installation path

  steps:
  - script: |
      export CLIENT_VERSION=`git describe --tags --dirty --always`
      echo '##vso[task.setvariable variable=Client.Version;]'${CLIENT_VERSION}
      echo '##vso[task.prependpath]$(GOBIN)' 
      echo '##vso[task.prependpath]$(GOROOT)/bin'
      export PATH="${GOROOT}/bin:${PATH}"
      export PATH="${GOBIN}:${PATH}"
      mkdir -p $(Build.ArtifactStagingDirectory)/artifact
      echo ${CLIENT_VERSION} > $(Build.ArtifactStagingDirectory)/artifact/version.txt
      pushd /tmp
      go get -u github.com/jstemmer/go-junit-report
      go get -u -d github.com/magefile/mage
      popd
      pushd ${GOPATH}/src/github.com/magefile/mage
      go run bootstrap.go
      popd
      go version
      mage --version
      echo ${CLIENT_VERSION}
    displayName: 'Set up the workspace'

  - script: |
      go test -v ./... 2>&1 | go-junit-report > $(Build.ArtifactStagingDirectory)/report.xml
      cp $(Build.ArtifactStagingDirectory)/report.xml $(Build.ArtifactStagingDirectory)/artifact/report.xml
    displayName: 'Unit Tests'

  - task: DownloadSecureFile@1
    displayName: 'Download Alpine Properties'
    inputs:
      secureFile: 'ab6d4017-c393-4e83-9a70-61e54520fc81'

  - task: DownloadSecureFile@1
    displayName: 'Download Windows Properties'
    inputs:
      secureFile: '0f0e6d24-eed9-4d6b-a60a-665139190909'

  - task: DownloadSecureFile@1
    displayName: 'Download Client Certificate'
    inputs:
      secureFile: 'fe048ca3-83a7-4258-857c-db117beea9a2'

  - task: DownloadSecureFile@1
    displayName: 'Download Root CA'
    inputs:
      secureFile: '82883b39-9ca3-4615-ab04-98496959f145'

  - script: |
      MYOF_CLIENT_CONFIG=$(Agent.TempDirectory) mage test
    displayName: 'E2E Tests'

  - script: |
      CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X github.com/myopenfactory/client/cmd.version=$(Client.Version)" -o $(Build.ArtifactStagingDirectory)/linux/amd64/myof-client
      CGO_ENABLED=0 GOOS=linux GOARCH=386 go build -ldflags "-X github.com/myopenfactory/client/cmd.version=$(Client.Version)" -o $(Build.ArtifactStagingDirectory)/linux/386/myof-client
      CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags "-X github.com/myopenfactory/client/cmd.version=$(Client.Version)" -o $(Build.ArtifactStagingDirectory)/windows/amd64/myof-client.exe
      CGO_ENABLED=0 GOOS=windows GOARCH=386 go build -ldflags "-X github.com/myopenfactory/client/cmd.version=$(Client.Version)" -o $(Build.ArtifactStagingDirectory)/windows/386/myof-client.exe
    displayName: 'Build'

  - script: |
      docker build -t $(AzureCR.URL)/client:$(Build.BuildNumber)-alpine -f Dockerfile --build-arg VERSION=$(Client.Version) .
      docker login -u "$(AzureCR.USER)" -p "$(AzureCR.TOKEN)" $(AzureCR.URL)
      docker push $(AzureCR.URL)/client:$(Build.BuildNumber)-alpine
    displayName: 'Build Docker'

  - task: ArchiveFiles@2
    displayName: 'Archive Linux amd64'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/linux/amd64'
      includeRootFolder: False
      archiveFile: '$(Build.ArtifactStagingDirectory)/artifact/myof-client_linux_amd64.zip'

  - task: ArchiveFiles@2
    displayName: 'Archive Linux 386'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/linux/386'
      includeRootFolder: False
      archiveFile: '$(Build.ArtifactStagingDirectory)/artifact/myof-client_linux_386.zip'

  - task: ArchiveFiles@2
    displayName: 'Archive Windows x64'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/windows/amd64'
      includeRootFolder: False
      archiveFile: '$(Build.ArtifactStagingDirectory)/artifact/myof-client_windows_amd64.zip'

  - task: ArchiveFiles@2
    displayName: 'Archive Windows 386'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/windows/386'
      includeRootFolder: False
      archiveFile: '$(Build.ArtifactStagingDirectory)/artifact/myof-client_windows_386.zip'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Build.ArtifactStagingDirectory)/report.xml' 

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/artifact'
      artifactName: myof-client

- job: Windows
  pool:
    name: default
    demands:
      - agent.location -equals local
      - agent.os -equals Windows_NT

  steps:
  - powershell: |
      docker build -t ${env:AZURECR_URL}/client:${env:BUILD_BUILDNUMBER}-windowsservercore -f Dockerfile.windows --build-arg VERSION=${env:CLIENT_VERSION} .
      docker login -u "${env:AZURECR_USER}" -p "${env:AZURECR_TOKEN}" ${env:AZURECR_URL}
      docker push ${env:AZURECR_URL}/client:${env:BUILD_BUILDNUMBER}-windowsservercore
    displayName: 'Build Docker'
