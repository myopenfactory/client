# Go
# Build your Go application.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/go

jobs:
- job: Linux
  pool:
    vmImage: 'Ubuntu 16.04'

  variables:
    GOBIN:  '$(GOPATH)/bin' # Go binaries path
    GOROOT: '/usr/local/go1.11' # Go installation path
    GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
    modulePath: '$(system.defaultWorkingDirectory)/src/github.com/$(build.repository.name)' # Path to the module's code

  steps:
  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      mv !(gopath) '$(modulePath)'
      cd $(modulePath)
      export CLIENT_VERSION=`git describe --tags --dirty --always`
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
      echo '##vso[task.setvariable variable=Client.Version;]'${CLIENT_VERSION}
    displayName: 'Set up the Go workspace'

  - script: |
      echo $(Client.Version)
      go version
      go get -v -t -d ./...
      GOOS=linux GOARCH=amd64 go build -v -ldflags "-X github.com/myopenfactory/client/cmd.version=$(Client.Version)" -o $(Build.ArtifactStagingDirectory)/linux/amd64/myof-client
      GOOS=linux GOARCH=386 go build -v -ldflags "-X github.com/myopenfactory/client/cmd.version=$(Client.Version)" -o $(Build.ArtifactStagingDirectory)/linux/386/myof-client
      GOOS=windows GOARCH=amd64 go build -v -ldflags "-X github.com/myopenfactory/client/cmd.version=$(Client.Version)" -o $(Build.ArtifactStagingDirectory)/windows/amd64/myof-client.exe
      GOOS=windows GOARCH=386 go build -v -ldflags "-X github.com/myopenfactory/client/cmd.version=$(Client.Version)" -o $(Build.ArtifactStagingDirectory)/windows/386/myof-client.exe
    workingDirectory: '$(modulePath)'
    displayName: 'Get dependencies, then build'

  - script: |
      go version
      go test ./...
    workingDirectory: '$(modulePath)'
    displayName: 'Run Tests'

  - script: |
      echo $(Client.Version)
      docker build -t $(AzureCR.URL)/client:$(Build.BuildNumber)-alpine -f Dockerfile --build-arg VERSION=$(Client.Version) .
      docker login -u $(AzureCR.USER) -p $(AzureCR.TOKEN) $(AzureCR.URL)
      docker push $(AzureCR.URL)/client:$(Build.BuildNumber)-alpine
    workingDirectory: '$(modulePath)'
    displayName: 'Build Docker'

  - task: ArchiveFiles@2
    displayName: 'Archive Linux amd64'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/linux/amd64'
      includeRootFolder: False
      archiveFile: '$(Build.ArtifactStagingDirectory)/artifact/myof-client_linux_amd64.zip'

  - task: ArchiveFiles@2
    displayName: 'Archive Linux 386'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/linux/386'
      includeRootFolder: False
      archiveFile: '$(Build.ArtifactStagingDirectory)/artifact/myof-client_linux_386.zip'

  - task: ArchiveFiles@2
    displayName: 'Archive Windows x64'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/windows/amd64'
      includeRootFolder: False
      archiveFile: '$(Build.ArtifactStagingDirectory)/artifact/myof-client_windows_amd64.zip'

  - task: ArchiveFiles@2
    displayName: 'Archive Windows 386'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/windows/386'
      includeRootFolder: False
      archiveFile: '$(Build.ArtifactStagingDirectory)/artifact/myof-client_windows_386.zip'

  - script: |
      echo $(Client.Version) > version.txt
    displayName: 'Generate version information'
    workingDirectory: '$(Build.ArtifactStagingDirectory)/artifact'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/artifact'
      artifactName: myof-client

- job: Windows
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - script: |
      git describe --tags --dirty --always  > version
      set /p CLIENT_VERSION= < version
      del version
      echo '##vso[task.setvariable variable=Client.Version;]%CLIENT_VERSION%'
    displayName: 'Set up variables'
  - script: |
      echo $(Client.Version)
      docker build -t $(AzureCR.URL)/client:$(Build.BuildNumber)-windowsservercore -f windows.Dockerfile --build-arg VERSION=$(Client.Version) .
      docker login -u $(AzureCR.USER) -p $(AzureCR.TOKEN) $(AzureCR.URL)
      docker push $(AzureCR.URL)/client:$(Build.BuildNumber)-windowsservercore
    displayName: 'Build Docker'